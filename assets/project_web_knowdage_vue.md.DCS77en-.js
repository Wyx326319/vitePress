import{_ as s,c as i,o as a,a4 as e,ah as l,ai as n,aj as t,ak as p,al as h,am as r}from"./chunks/framework.CVMBBZRK.js";const v=JSON.parse('{"title":"Vue全家桶","description":"","frontmatter":{},"headers":[],"relativePath":"project/web/knowdage/vue.md","filePath":"project/web/knowdage/vue.md","lastUpdated":null}'),o={name:"project/web/knowdage/vue.md"},k=e(`<h1 id="vue全家桶" tabindex="-1">Vue全家桶 <a class="header-anchor" href="#vue全家桶" aria-label="Permalink to &quot;Vue全家桶&quot;">​</a></h1><h2 id="vue3简介" tabindex="-1">Vue3简介 <a class="header-anchor" href="#vue3简介" aria-label="Permalink to &quot;Vue3简介&quot;">​</a></h2><ul><li>2020年9月18日，Vue.js发布版3.0版本</li><li>经历了：4800+次提交、40+个RFC、600+次PR、300+贡献者</li><li>官方发版地址：Release v3.0.0 One Piece · vuejs/core</li><li>截止2023年10月，最新的公开版本为：3.3.4</li></ul><h3 id="_1-1-【性能的提升】" tabindex="-1">1.1. 【性能的提升】 <a class="header-anchor" href="#_1-1-【性能的提升】" aria-label="Permalink to &quot;1.1. 【性能的提升】&quot;">​</a></h3><ul><li>打包大小减少41%。</li><li>初次渲染快55%, 更新渲染快133%。</li><li>内存减少54%。</li></ul><h3 id="_1-2-【-源码的升级】" tabindex="-1">1.2.【 源码的升级】 <a class="header-anchor" href="#_1-2-【-源码的升级】" aria-label="Permalink to &quot;1.2.【 源码的升级】&quot;">​</a></h3><ul><li>使用Proxy代替defineProperty实现响应式。</li><li>重写虚拟DOM的实现和Tree-Shaking。</li></ul><h3 id="_1-3-【拥抱typescript】" tabindex="-1">1.3. 【拥抱TypeScript】 <a class="header-anchor" href="#_1-3-【拥抱typescript】" aria-label="Permalink to &quot;1.3. 【拥抱TypeScript】&quot;">​</a></h3><ul><li>Vue3可以更好的支持TypeScript。</li></ul><h3 id="_1-4-【新的特性】" tabindex="-1">1.4. 【新的特性】 <a class="header-anchor" href="#_1-4-【新的特性】" aria-label="Permalink to &quot;1.4. 【新的特性】&quot;">​</a></h3><ol><li>Composition API（组合API）： <ul><li>setup</li><li>ref与reactive</li><li>computed与watch ......</li></ul></li><li>新的内置组件： <ul><li>Fragment</li><li>Teleport</li><li>Suspense ......</li></ul></li><li>其他改变： <ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为v-on 的修饰符 ......</li></ul></li></ol><h2 id="创建vue工程" tabindex="-1">创建Vue工程 <a class="header-anchor" href="#创建vue工程" aria-label="Permalink to &quot;创建Vue工程&quot;">​</a></h2><h3 id="【基于-vue-cli-创建】" tabindex="-1">【基于 vue-cli 创建】 <a class="header-anchor" href="#【基于-vue-cli-创建】" aria-label="Permalink to &quot;【基于 vue-cli 创建】&quot;">​</a></h3><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noreferrer">官方文档</a> 备注: 目前Vue-cli已处于维护模式，官方推荐基于Vite创建项目</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 安装或者升级你的@vue/cli </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g @vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 执行创建命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue create vue_test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##  随后选择3.x</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##  &gt; 3.x</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##    2.x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 启动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd vue_test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm run serve</span></span></code></pre></div><h3 id="【基于-vite-创建】-推荐" tabindex="-1">【基于 vite 创建】(推荐) <a class="header-anchor" href="#【基于-vite-创建】-推荐" aria-label="Permalink to &quot;【基于 vite 创建】(推荐)&quot;">​</a></h3><p>vite 是新一代前端构建工具，<a href="https://vitejs.cn" target="_blank" rel="noreferrer">官网地址</a>，vite的优势如下：</p><ul><li>轻量快速的热重载（HMR），能实现极速的服务启动。</li><li>对 TypeScript、JSX、CSS 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li>webpack构建 与 vite构建对比图如下： <img src="`+l+'" alt="img"><img src="'+n+`" alt="img"></li><li>具体操作如下<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application" target="_blank" rel="noreferrer">点击查看官方文档</a></li></ul><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 1.创建命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm create vue@latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 2.具体配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 配置项目名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Project name: vue3_test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加TypeScript支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add TypeScript?  Yes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加JSX支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add JSX Support?  No</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加路由环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add Vue Router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Single Page Application development?  No</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加pinia环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add Pinia </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state management?  No</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加单元测试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add Vitest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit Testing?  No</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加端到端测试方案</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add an </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">End-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">End Testing Solution? » No</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加ESLint语法检查</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add ESLint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code quality?  Yes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 是否添加Prettiert代码格式化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">√ Add Prettier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code formatting?  No</span></span></code></pre></div><ul><li>Vite 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，Vite 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;&lt;/script&gt;</code> 指向的JavaScript。</li><li>Vue3中是通过 createApp 函数创建一个应用实例。</li></ul><h2 id="【optionsapi-与-compositionapi】" tabindex="-1">【OptionsAPI 与 CompositionAPI】 <a class="header-anchor" href="#【optionsapi-与-compositionapi】" aria-label="Permalink to &quot;【OptionsAPI 与 CompositionAPI】&quot;">​</a></h2><ul><li>Vue2的API设计是Options（配置）风格的。</li><li>Vue3的API设计是Composition（组合）风格的。</li></ul><h3 id="options-api-的弊端" tabindex="-1">Options API 的弊端 <a class="header-anchor" href="#options-api-的弊端" aria-label="Permalink to &quot;Options API 的弊端&quot;">​</a></h3><p>Options类型的 API，数据、方法、计算属性等，是分散在：data、methods、computed中的， 若想新增或者修改一个需求，就需要分别修改：data、methods、computed，不便于维护和复用。<br><img src="`+t+'" alt="4.gif" style="display:inline-block;height:300px;border-radius:10px;"><img src="'+p+'" alt="2.gif" style="display:inline-block;zoom:70%;border-radius:20px;"></p><h3 id="composition-api-的优势" tabindex="-1">Composition API 的优势 <a class="header-anchor" href="#composition-api-的优势" aria-label="Permalink to &quot;Composition API 的优势&quot;">​</a></h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。 <img src="'+h+'" alt="4.gif" style="display:inline-block;zoom:70%;height:300px;border-radius:10px;"><img src="'+r+`" alt="4.gif" style="display:inline-block;zoom:70%;height:300px;border-radius:10px;"><br> 说明：以上四张动图原创作者：大帅老猿</p><h2 id="setup" tabindex="-1">setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;setup&quot;">​</a></h2><p>setup是Vue3中一个新的配置项，值是一个函数，它是 Composition API “表演的舞台”，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在setup中。</p><p>特点如下：</p><ul><li>setup函数返回的对象中的内容，可直接在模板中使用。</li><li>setup中访问this是undefined。</li><li>setup函数会在beforeCreate之前调用，它是“领先”所有钩子执行的。</li></ul><h3 id="setup-的返回值" tabindex="-1">setup 的返回值 <a class="header-anchor" href="#setup-的返回值" aria-label="Permalink to &quot;setup 的返回值&quot;">​</a></h3><ul><li>若返回一个对象：则对象中的：属性、方法等，在模板中均可以直接使用（重点关注）。</li><li>若返回一个函数：则可以自定义渲染内容，代码如下：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;你好啊！&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="setup-与-options-api-的关系" tabindex="-1">setup 与 Options API 的关系 <a class="header-anchor" href="#setup-与-options-api-的关系" aria-label="Permalink to &quot;setup 与 Options API 的关系&quot;">​</a></h3><p>Vue2 的配置（data、methos......）中可以访问到 setup中的属性、方法。</p><p>但在setup中不能访问到Vue2的配置（data、methos......）。</p><p>如果与Vue2冲突，则setup优先。</p><h3 id="setup-语法糖" tabindex="-1">setup 语法糖 <a class="header-anchor" href="#setup-语法糖" aria-label="Permalink to &quot;setup 语法糖&quot;">​</a></h3>`,38),d=[k];function c(u,g,E,y,m,A){return a(),i("div",null,d)}const D=s(o,[["render",c]]);export{v as __pageData,D as default};
